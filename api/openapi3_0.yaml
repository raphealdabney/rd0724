openapi: 3.0.3
info:
  title: Tool Rental API - OpenAPI 3.0
  description: |-
    This is the application that is provided to run the remote desktop store. Below defined is a REST API that allows creation of orders / remote desktop environments and ordering / shopping.

    Once application is deployed via docker there are 4 links available locally / remotely.

    Some useful links:
    - [Frontend Store](http://localhost:8081)
    - [Store / Order API](http://localhost:8082)
    - [Postgres DB Manager](http://localhost:8084)
    - [Postgres DB Server](http://localhost:8083)

  contact:
    email: raphealdabney@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:8082
tags:
  - name: order
    description: Orders that are avaialble for sale.
  - name: product
    description: Shopping cart session / order session
  - name: orderItem
    description: Individual order items that belong to an order.
paths:
  /products:
    get:
      tags:
        - product
      summary: get all products from the store
      description: Get all products from the store
      operationId: getProducts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    post:
      tags:
        - product
      summary: Add a new product to the store
      description: Add a new product to the store
      operationId: addProduct
      requestBody:
        description: Create a new product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /products/{productId}:
    get:
      tags:
        - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
    put:
      tags:
        - product
      summary: Update an existing product
      description: Update an existing product by Id
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
        '422':
          description: Validation exception
    delete:
      tags:
        - product
      summary: Deletes a product
      description: delete a product
      operationId: deleteProduct
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid product value
  /orders:
    get:
      tags:
        - order
      summary: get all orders from the store
      description: Get all orders from the store
      operationId: getOrders
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    post:
      tags:
        - order
      summary: Add a new order to the store
      description: Add a new order to the store
      operationId: addOrder
      requestBody:
        description: Create a new order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /orders/{productId}:
    get:
      tags:
        - order
      summary: Find order by ID
      description: Returns a single order
      operationId: getOrderById
      parameters:
        - name: productId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    put:
      tags:
        - order
      summary: Update an existing order
      description: Update an existing order by Id
      operationId: updateOrder
      parameters:
        - name: productId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        '422':
          description: Validation exception
    delete:
      tags:
        - order
      summary: Deletes a order
      description: delete a order
      operationId: deleteOrder
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: productId
          in: path
          description: Order id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid order value
  /orderItems:
    get:
      tags:
        - orderItem
      summary: get all orderItems from the store
      description: Get all orderItems from the store
      operationId: getOrderItems
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    post:
      tags:
        - orderItem
      summary: Add a new orderItem to the store
      description: Add a new orderItem to the store
      operationId: addOrderItems
      requestBody:
        description: Create a new orderItem in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
          application/xml:
            schema:
              $ref: '#/components/schemas/OrderItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItem'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /orderItems/{orderItemId}:
    get:
      tags:
        - orderItem
      summary: Find orderItem by ID
      description: Returns a single orderItem
      operationId: getOrderItemsById
      parameters:
        - name: orderItemId
          in: path
          description: ID of orderItem to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: OrderItem not found
    put:
      tags:
        - orderItem
      summary: Update an existing orderItem
      description: Update an existing orderItem by Id
      operationId: updateOrderItems
      parameters:
        - name: orderItemId
          in: path
          description: ID of orderItem to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent orderItem in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
          application/xml:
            schema:
              $ref: '#/components/schemas/OrderItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItem'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
            application/xml:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '400':
          description: Invalid ID supplied
        '404':
          description: OrderItem not found
        '422':
          description: Validation exception
    delete:
      tags:
        - orderItem
      summary: Deletes a orderItem
      description: delete a orderItem
      operationId: deleteOrderItems
      parameters:
        - name: orderItemId
          in: path
          description: OrderItem id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid orderItem value

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        name:
          type: string
          example: fehguy
        imageUrl:
          type: string
          example: https://image.com/image
        price:
          type: number
          example: 24.5
      xml:
        name: order
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        product_id:
          type: integer
          format: int64
          example: 2
        'quantity':
          type: integer
          format: int64
          example: 3
      xml:
        name: address
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Order:
      description: order object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
        application/xml:
          schema:
            $ref: '#/components/schemas/Order'
    OrderItem:
      description: order item
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/OrderItem'
